name: CI

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    PYTHON_VERSION: "3.10"
    UV_CACHE_DIR: ~/.cache/uv

jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.10", "3.11", "3.12"]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Cache uv dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.cache/uv
                  key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-uv-${{ matrix.python-version }}-

            - name: Install dependencies
              run: |
                  uv pip install --upgrade pip
                  uv pip install torch --index-url https://download.pytorch.org/whl/cpu
                  uv pip install -e .[dev]

            - name: Run linting
              run: |
                  uv pip install ruff black isort
                  ruff check src/ tests/
                  black --check src/ tests/
                  isort --check-only src/ tests/

            - name: Run type checking
              run: |
                  uv pip install mypy
                  mypy src/protpardelle --ignore-missing-imports

            - name: Run unit tests
              run: |
                  uv run pytest tests/ -m "not slow and not gpu and not requires_model and not requires_checkpoint" -v --tb=short

            - name: Run integration tests (if not slow)
              run: |
                  uv run pytest tests/ -m "integration and not slow and not gpu" -v --tb=short
              continue-on-error: true

    test-gpu:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python 3.10
              uses: actions/setup-python@v4
              with:
                  python-version: "3.10"

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Cache uv dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.cache/uv
                  key: ${{ runner.os }}-uv-3.10-${{ hashFiles('**/uv.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-uv-3.10-

            - name: Install CUDA dependencies
              run: |
                  uv pip install --upgrade pip
                  uv pip install torch --index-url https://download.pytorch.org/whl/cu121
                  uv pip install -e .[dev]

            - name: Run GPU tests
              run: |
                  uv run pytest tests/ -m "gpu and not slow" -v --tb=short
              continue-on-error: true

    build:
        runs-on: ubuntu-latest
        needs: [test]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.10"

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Install build dependencies
              run: |
                  uv pip install build twine

            - name: Build package
              run: |
                  python -m build

            - name: Check package
              run: |
                  twine check dist/*

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: dist
                  path: dist/

    security:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v2
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    documentation:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.10"

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Install documentation dependencies
              run: |
                  uv pip install sphinx sphinx-rtd-theme myst-parser
                  uv pip install -e .

            - name: Build documentation
              run: |
                  # Create basic documentation structure if it doesn't exist
                  mkdir -p docs
                  echo "# Protpardelle-1c Documentation" > docs/index.md
                  echo "This is the documentation for Protpardelle-1c." >> docs/index.md
              continue-on-error: true
